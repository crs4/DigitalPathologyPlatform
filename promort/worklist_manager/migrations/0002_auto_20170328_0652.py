# -*- coding: utf-8 -*-

#  Copyright (c) 2019, CRS4
# 
#  Permission is hereby granted, free of charge, to any person obtaining a copy of
#  this software and associated documentation files (the "Software"), to deal in
#  the Software without restriction, including without limitation the rights to
#  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
#  the Software, and to permit persons to whom the Software is furnished to do so,
#  subject to the following conditions:
# 
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
# 
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Generated by Django 1.10.5 on 2017-03-28 06:52
from __future__ import unicode_literals

from django.db import migrations

import logging
logger = logging.getLogger('promort')


def rename_groups(apps, schema_editor):
    groups_map = [
        {
            'old_name': 'REVIEWER_1',
            'new_name': 'ROIS_MANAGERS'
        },
        {
            'old_name': 'REVIEWER_2',
            'new_name': 'CLINICAL_MANAGERS'
        },
        {
            'old_name': 'REVIEWER_3',
            'new_name': 'GOLD_STANDARDS'
        }
    ]
    Group = apps.get_model('auth', 'Group')
    for group_desc in groups_map:
        logger.info('Getting group %s', group_desc['old_name'])
        try:
            group_obj = Group.objects.get(name=group_desc['old_name'])
            logger.info('Setting new name %s', group_desc['new_name'])
            group_obj.name = group_desc['new_name']
            group_obj.save()
            logger.info('Group name updated')
        except Group.DoesNotExist:
            logger.warning('No group with name %s, no need to update', group_desc['old_name'])


class Migration(migrations.Migration):

    dependencies = [
        ('worklist_manager', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(rename_groups),
    ]

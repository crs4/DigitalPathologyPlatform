# -*- coding: utf-8 -*-

#  Copyright (c) 2019, CRS4
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy of
#  this software and associated documentation files (the "Software"), to deal in
#  the Software without restriction, including without limitation the rights to
#  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
#  the Software, and to permit persons to whom the Software is furnished to do so,
#  subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Generated by Django 1.10.5 on 2017-02-16 15:44
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('rois_manager', '0013_auto_20170208_0940'),
        ('reviews_manager', '0009_auto_20170213_1555'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CoreAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('primary_gleason', models.IntegerField()),
                ('secondary_gleason', models.IntegerField()),
                ('gleason_4_percentage', models.FloatField(default=0.0)),
                ('gleason_group', models.CharField(choices=[(b'GG1', b'GRADE_GROUP_1'), (b'GG2', b'GRADE_GROUP_2'), (b'GG3', b'GRADE_GROUP_3'), (b'GG4', b'GRADE_GROUP_4'), (b'GG5', b'GRADE_GROUP_5')], max_length=3)),
                ('annotation_step', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='core_annotations', to='reviews_manager.ClinicalAnnotationStep')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('core', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='clinical_annotations', to='rois_manager.Core')),
            ],
        ),
        migrations.CreateModel(
            name='FocusRegionAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('perineural_involvement', models.BooleanField(default=False)),
                ('intraductal_carcinoma', models.BooleanField(default=False)),
                ('poorly_formed_glands', models.BooleanField(default=False)),
                ('cribriform_pattern', models.BooleanField(default=False)),
                ('small_cell_signer_ring', models.BooleanField(default=False)),
                ('hypernephroid_pattern', models.BooleanField(default=False)),
                ('mucinous', models.BooleanField(default=False)),
                ('comedo_necrosis', models.BooleanField(default=False)),
                ('gleason_4_path_json', models.TextField(blank=True)),
                ('gleason_4_area', models.FloatField(default=0)),
                ('cellular_density_helper_json', models.TextField(blank=True)),
                ('cellular_density', models.IntegerField(blank=True)),
                ('annotation_step', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='focus_region_annotations', to='reviews_manager.ClinicalAnnotationStep')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('focus_region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='clinical_annotations', to='rois_manager.FocusRegion')),
            ],
        ),
        migrations.CreateModel(
            name='SliceAnnotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('high_grade_pin', models.BooleanField(default=False)),
                ('pah', models.BooleanField(default=False)),
                ('chronic_inflammation', models.BooleanField(default=False)),
                ('acute_inflammation', models.BooleanField(default=False)),
                ('periglandular_inflammation', models.BooleanField(default=False)),
                ('intraglandular_inflammation', models.BooleanField(default=False)),
                ('stromal_inflammation', models.BooleanField(default=False)),
                ('annotation_step', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='slice_annotations', to='reviews_manager.ClinicalAnnotationStep')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('slice', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='clinical_annotations', to='rois_manager.Slice')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='sliceannotation',
            unique_together=set([('slice', 'annotation_step')]),
        ),
        migrations.AlterUniqueTogether(
            name='focusregionannotation',
            unique_together=set([('focus_region', 'annotation_step')]),
        ),
        migrations.AlterUniqueTogether(
            name='coreannotation',
            unique_together=set([('core', 'annotation_step')]),
        ),
    ]

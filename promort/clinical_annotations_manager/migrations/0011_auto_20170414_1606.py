# -*- coding: utf-8 -*-

#  Copyright (c) 2019, CRS4
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy of
#  this software and associated documentation files (the "Software"), to deal in
#  the Software without restriction, including without limitation the rights to
#  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
#  the Software, and to permit persons to whom the Software is furnished to do so,
#  subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Generated by Django 1.10.5 on 2017-04-14 16:06
from __future__ import unicode_literals

from django.db import migrations


def move_g4_elements(apps, schema_editor):
    Gleason4Element = apps.get_model('clinical_annotations_manager', 'Gleason4Element')
    GleasonElement = apps.get_model('clinical_annotations_manager', 'GleasonElement')
    FocusRegionAnnotation = apps.get_model('clinical_annotations_manager', 'FocusRegionAnnotation')
    for g4_element in Gleason4Element.objects.all():
        gleason_element = GleasonElement(
            json_path=g4_element.json_path,
            area=g4_element.area,
            cellular_density_helper_json=g4_element.cellular_density_helper_json,
            cellular_density=g4_element.cellular_density,
            cells_count=g4_element.cells_count,
            focus_region_annotation=FocusRegionAnnotation.objects.get(pk=g4_element.focus_region_annotation_id),
            gleason_type='G4'
        )
        gleason_element.save()


def reverse_move_g4_elements(apps, schema_editor):
    GleasonElement = apps.get_model('clinical_annotations_manager', 'GleasonElement')
    GleasonElement.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('clinical_annotations_manager', '0010_gleasonelement'),
    ]

    operations = [
        migrations.RunPython(move_g4_elements, reverse_move_g4_elements)
    ]

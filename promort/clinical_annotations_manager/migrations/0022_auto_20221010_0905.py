#  Copyright (c) 2022, CRS4
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy of
#  this software and associated documentation files (the "Software"), to deal in
#  the Software without restriction, including without limitation the rights to
#  use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
#  the Software, and to permit persons to whom the Software is furnished to do so,
#  subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
#  FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
#  COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
#  IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
#  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Generated by Django 3.1.13 on 2022-10-10 09:05

from django.db import migrations
from collections import Counter
import json


def update_gleason_patterns(apps, schema_editor):
    FocusRegionAnnotation = apps.get_model(
        "clinical_annotations_manager", "FocusRegionAnnotation"
    )
    gleason_patterns_counter = Counter()
    for fr in FocusRegionAnnotation.objects.all():
        for gleason_element in fr.gleason_elements.all():
            gleason_patterns_counter[fr.annotation_step.label] += 1
            gleason_element.label = "gleason_{0}".format(gleason_patterns_counter[fr.annotation_step.label])
            gleason_element.focus_region = (
                gleason_element.focus_region_annotation.focus_region
            )
            gleason_element.annotation_step = (
                gleason_element.focus_region_annotation.annotation_step
            )
            gleason_element.author = gleason_element.focus_region_annotation.author
            if gleason_element.gleason_type in ("G1", "G2"):
                gleason_element.details_json = json.dumps(
                    {
                        "notes": "previously classified as {0}".format(
                            gleason_element.gleason_type
                        )
                    }
                )
                gleason_element.gleason_type = "OT"
            gleason_element.save()


class Migration(migrations.Migration):

    dependencies = [
        (
            "clinical_annotations_manager",
            "0021_auto_20221010_0718_squashed_0022_auto_20221010_0858",
        ),
    ]

    operations = [migrations.RunPython(update_gleason_patterns)]
